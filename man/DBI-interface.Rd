% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbi_spark_table.R, R/dbi_spark_transactions.R
\docType{methods}
\name{DBI-interface}
\alias{DBI-interface}
\alias{dbBegin,DBISparkConnection-method}
\alias{dbCommit,DBISparkConnection-method}
\alias{dbExistsTable,DBISparkConnection,character-method}
\alias{dbListTables,DBISparkConnection-method}
\alias{dbReadTable,DBISparkConnection,character-method}
\alias{dbRemoveTable,DBISparkConnection,character-method}
\alias{dbRollback,DBISparkConnection-method}
\alias{dbWriteTable,DBISparkConnection-method}
\alias{mutate_.tbl_spark}
\title{DBI interface for Spark}
\usage{
\S4method{dbWriteTable}{DBISparkConnection}(conn, name, value,
  temporary = TRUE, repartition = 0)

\S4method{dbReadTable}{DBISparkConnection,character}(conn, name)

\S4method{dbListTables}{DBISparkConnection}(conn)

\S4method{dbExistsTable}{DBISparkConnection,character}(conn, name)

\S4method{dbRemoveTable}{DBISparkConnection,character}(conn, name)

\method{mutate_}{tbl_spark}(.data, ..., .dots)

\S4method{dbBegin}{DBISparkConnection}(conn)

\S4method{dbCommit}{DBISparkConnection}(conn)

\S4method{dbRollback}{DBISparkConnection}(conn)
}
\arguments{
\item{conn}{a \code{\linkS4class{DBISparkConnection}} object, produced by
\code{\link[DBI]{dbConnect}}}

\item{name}{a character string specifying a table name.}

\item{value}{A data.frame to write to the database.}

\item{temporary}{If \code{TRUE}, will generate a temporary table statement.}

\item{repartition}{Total of partitions used to distribute table or 0 (default) to avoid partitioning}

\item{.data}{Data and operations references}

\item{...}{Additional parameters}

\item{.dots}{Original parameters}
}
\description{
DBI interface for Spark
}
\examples{
\dontrun{
sc <- spark_connect()
con <- dbConnect(spark::DBISpark(sc))

dbListTables(con)
dbWriteTable(con, "mtcars", mtcars, temporary = TRUE)
dbReadTable(con, "mtcars")

dbListTables(con)
dbExistsTable(con, "mtcars")

# A zero row data frame just creates a table definition.
dbWriteTable(con, "mtcars2", mtcars[0, ], temporary = TRUE)
dbReadTable(con, "mtcars2")

dbDisconnect(con)
}
}
\keyword{internal}

