% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbi_spark_result.R
\docType{class}
\name{DBISparkResult-class}
\alias{DBISparkResult-class}
\alias{dbBind,DBISparkResult-method}
\alias{dbClearResult,DBISparkResult-method}
\alias{dbColumnInfo,DBISparkResult-method}
\alias{dbFetch,DBISparkResult-method}
\alias{dbGetRowCount,DBISparkResult-method}
\alias{dbGetStatement,DBISparkResult-method}
\alias{dbHasCompleted,DBISparkResult-method}
\alias{dbIsValid,DBISparkResult-method}
\alias{dbSendQuery,DBISparkConnection,character-method}
\alias{dbi-spark-query}
\title{DBISparkResult results.}
\usage{
\S4method{dbGetStatement}{DBISparkResult}(res, ...)

\S4method{dbIsValid}{DBISparkResult}(dbObj, ...)

\S4method{dbGetRowCount}{DBISparkResult}(res, ...)

\S4method{dbColumnInfo}{DBISparkResult}(res, ...)

\S4method{dbSendQuery}{DBISparkConnection,character}(conn, statement,
  params = NULL, ...)

\S4method{dbFetch}{DBISparkResult}(res, n = -1, ..., row.names = NA)

\S4method{dbBind}{DBISparkResult}(res, params, ...)

\S4method{dbHasCompleted}{DBISparkResult}(res, ...)

\S4method{dbClearResult}{DBISparkResult}(res, ...)
}
\arguments{
\item{res}{Code a \linkS4class{DBISparkResult} produced by
\code{\link[DBI]{dbSendQuery}}.}

\item{conn}{A \code{\linkS4class{DBISparkConnection}} created by \code{dbConnect}.}

\item{statement}{An SQL string to execture}

\item{params}{A list of query parameters to be substituted into
a parameterised query.}

\item{n}{Number of rows to return. If less than zero returns all rows.}

\item{row.names}{Either \code{TRUE}, \code{FALSE}, \code{NA} or a string.

  If \code{TRUE}, always translate row names to a column called "row_names".
  If \code{FALSE}, never translate row names. If \code{NA}, translate
  rownames only if they're a character vector.

  A string is equivalent to \code{TRUE}, but allows you to override the
  default name.

  For backward compatibility, \code{NULL} is equivalent to \code{FALSE}.}
}
\description{
DBISparkResult results.

To retrieve results a chunk at a time, use \code{dbSendQuery},
\code{dbFetch}, then \code{ClearResult}. Alternatively, if you want all the
results (and they'll fit in memory) use \code{dbGetQuery} which sends,
fetches and clears for you.
}
\examples{
\dontrun{
library(DBI)
library(spark)
library(nycflights13)

sc <- spark_connect()
db <- dbConnect(DBISpark(sc))
dbWriteTable(db, "flights", flights, temporary = TRUE)

# Run query to get results as dataframe
dbGetQuery(db, "SELECT * FROM flights LIMIT 1")

# Send query to pull requests in batches
res <- dbSendQuery(db, "SELECT * FROM usarrests")
dbFetch(res, n = 1)
dbHasCompleted(res)
dbClearResult(res)

dbRemoveTable(db, "flights")

dbDisconnect(db)
}
}
\keyword{internal}

